{
  "name": "vscode-codemetrics",
  "private": true,
  "description": "Computes complexity in TypeScript / JavaScript files.",
  "author": "Tamas Kiss",
  "publisher": "kisstkondoros",
  "license": "MIT",
  "version": "1.12.0",
  "displayName": "CodeMetrics",
  "icon": "images/logo.png",
  "engines": {
    "vscode": "^1.16.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kisstkondoros/codemetrics.git"
  },
  "keywords": [
    "vscode",
    "code",
    "metrics",
    "typescript",
    "javascript"
  ],
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "commands": [
      {
        "command": "codemetrics.toggleCodeMetricsForArrowFunctions",
        "title": "Toggle code lenses for arrow functions"
      },
      {
        "command": "codemetrics.toggleCodeMetricsDisplayed",
        "title": "Toggle code metrics"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "CodeMetrics configuration",
      "properties": {
        "codemetrics.basics.Exclude": {
          "description": "Array of exclusion patterns (in glob format)",
          "type": "array",
          "default": []
        },
        "codemetrics.basics.OverviewRulerModeEnabled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are shown on the overview ruler",
          "type": "boolean"
        },
        "codemetrics.basics.DecorationModeEnabled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are shown as inline decoration",
          "type": "boolean"
        },
        "codemetrics.basics.CodeLensEnabled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are shown as code lens",
          "type": "boolean"
        },
        "codemetrics.basics.DiagnosticsEnabled": {
          "default": false,
          "description": "A flag which indicates whether code metrics are shown as diagnostics",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForClassDeclarationsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for class declarations",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForConstructorsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for constructors",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForEnumDeclarationsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for enum declarations",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForFunctionDeclarationsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for function declarations",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForFunctionExpressionsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for function expressions",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForMethodDeclarationsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for methods declarations",
          "type": "boolean"
        },
        "codemetrics.basics.MetricsForArrowFunctionsToggled": {
          "default": true,
          "description": "A flag which indicates whether code metrics are enabled for arrow functions (can also be toggled via a command)",
          "type": "boolean"
        },
        "codemetrics.basics.FileSizeLimitMB": {
          "default": 0.5,
          "description": "File size limit in megabytes, above this codemetrics are not going to be computed, use a negative number to allow any size",
          "type": "number"
        },
        "codemetrics.basics.EnabledForVue": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for Vue",
          "type": "boolean"
        },
        "codemetrics.basics.EnabledForHTML": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for HTML",
          "type": "boolean"
        },
        "codemetrics.basics.EnabledForLua": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for Lua",
          "type": "boolean"
        },
        "codemetrics.basics.EnabledForJS": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for JS",
          "type": "boolean"
        },
        "codemetrics.basics.EnabledForJSX": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for JSX",
          "type": "boolean"
        },
        "codemetrics.basics.EnabledForTS": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for TS",
          "type": "boolean"
        },
        "codemetrics.basics.EnabledForTSX": {
          "default": true,
          "description": "A flag which indicates whether codemetrics are enabled for TSX",
          "type": "boolean"
        },
        "codemetrics.basics.ComplexityLevelExtreme": {
          "default": 25,
          "description": "Threshold to determine extreme high complexity level",
          "type": "number"
        },
        "codemetrics.basics.ComplexityLevelHigh": {
          "default": 10,
          "description": "Threshold to determine high complexity level",
          "type": "number"
        },
        "codemetrics.basics.ComplexityLevelNormal": {
          "default": 5,
          "description": "Threshold to determine normal complexity level",
          "type": "number"
        },
        "codemetrics.basics.ComplexityLevelLow": {
          "default": 0,
          "description": "Threshold to determine low complexity level",
          "type": "number"
        },
        "codemetrics.basics.CodeLensHiddenUnder": {
          "default": 3,
          "description": "Threshold to show code lens for code metrics",
          "type": "number"
        },
        "codemetrics.basics.ComplexityLevelExtremeDescription": {
          "default": "Bloody hell...",
          "description": "Code lens message for extreme high complexity level",
          "type": "string"
        },
        "codemetrics.basics.ComplexityLevelHighDescription": {
          "default": "You must be kidding",
          "description": "Code lens message for high complexity level",
          "type": "string"
        },
        "codemetrics.basics.ComplexityLevelNormalDescription": {
          "default": "It's time to do something...",
          "description": "Code lens message for normal complexity level",
          "type": "string"
        },
        "codemetrics.basics.ComplexityLevelLowDescription": {
          "default": "Everything is cool!",
          "description": "Code lens message for low complexity level",
          "type": "string"
        },
        "codemetrics.basics.ComplexityTemplate": {
          "default": "Complexity is {0} {1}",
          "description": "Code lens message template {0} stands for the actual value {1} is for the complexity level description",
          "type": "string"
        },
        "codemetrics.luaconfiguration.LabelStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.BreakStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.GotoStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.ReturnStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.IfStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.IfClause": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.ElseifClause": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.ElseClause": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.WhileStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.DoStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.RepeatStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.LocalStatement": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.AssignmentStatement": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.CallStatement": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.FunctionDeclaration": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.ForNumericStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.ForGenericStatement": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.Chunk": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.Identifier": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.StringLiteral": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.NumericLiteral": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.BooleanLiteral": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.NilLiteral": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.VarargLiteral": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.TableKey": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.TableKeyString": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.TableValue": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.TableConstructorExpression": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.LogicalExpression": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.BinaryExpression": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.UnaryExpression": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.MemberExpression": {
          "type": "number",
          "default": 1
        },
        "codemetrics.luaconfiguration.IndexExpression": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.CallExpression": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.TableCallExpression": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.StringCallExpression": {
          "type": "number",
          "default": 0
        },
        "codemetrics.luaconfiguration.Comment": {
          "type": "number",
          "default": 0
        },
        "codemetrics.nodeconfiguration.AnyKeyword": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.AnyKeywordDescription": {
          "default": "Any keyword",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ArrayBindingPattern": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ArrayBindingPatternDescription": {
          "default": "Array binding pattern",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ArrayLiteralExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ArrayLiteralExpressionDescription": {
          "default": "Array literal expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ArrowFunction": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ArrowFunctionDescription": {
          "default": "Arrow function",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.BinaryExpression": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.BinaryExpressionDescription": {
          "default": "Binary expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.BindingElement": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.BindingElementDescription": {
          "default": "Binding element",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.Block": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.BlockDescription": {
          "default": "Block",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.BreakStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.BreakStatementDescription": {
          "default": "Break statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.CallExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.CallExpressionDescription": {
          "default": "Call expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.CallSignature": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.CallSignatureDescription": {
          "default": "Call signature",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.CaseClause": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.CaseClauseDescription": {
          "default": "Case clause",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ClassDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ClassDeclarationDescription": {
          "default": "Class declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.CatchClause": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.CatchClauseDescription": {
          "default": "Catch clause",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ConditionalExpression": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ConditionalExpressionDescription": {
          "default": "Conditional expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.Constructor": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ConstructorDescription": {
          "default": "Constructor",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ConstructorType": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ConstructorTypeDescription": {
          "default": "Constructor type",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ContinueStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ContinueStatementDescription": {
          "default": "Continue statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.DebuggerStatement": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.DebuggerStatementDescription": {
          "default": "Debugger statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.DefaultClause": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.DefaultClauseDescription": {
          "default": "Default case",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.DoStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.DoStatementDescription": {
          "default": "Do statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ElementAccessExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ElementAccessExpressionDescription": {
          "default": "Element access expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.EnumDeclaration": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.EnumDeclarationDescription": {
          "default": "Enum declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ExportAssignment": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ExportAssignmentDescription": {
          "default": "Export assignment",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ExpressionStatement": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ExpressionStatementDescription": {
          "default": "Expression statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ForStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ForStatementDescription": {
          "default": "For statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ForInStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ForInStatementDescription": {
          "default": "For in statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ForOfStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ForOfStatementDescription": {
          "default": "For of statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.FunctionDeclaration": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.FunctionDeclarationDescription": {
          "default": "Function declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.FunctionExpression": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.FunctionExpressionDescription": {
          "default": "Function expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.FunctionType": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.FunctionTypeDescription": {
          "default": "Function type",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.GetAccessor": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.GetAccessorDescription": {
          "default": "Get accessor",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.Identifier": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.IdentifierDescription": {
          "default": "Identifier",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.IfWithElseStatement": {
          "default": 2,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.IfWithElseStatementDescription": {
          "default": "If with else statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.IfStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.IfStatementDescription": {
          "default": "If statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ImportDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ImportDeclarationDescription": {
          "default": "Import declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ImportEqualsDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ImportEqualsDeclarationDescription": {
          "default": "Import equals declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.IndexSignature": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.IndexSignatureDescription": {
          "default": "Index signature",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.InterfaceDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.InterfaceDeclarationDescription": {
          "default": "Interface declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.JsxElement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.JsxElementDescription": {
          "default": "Jsx element",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.JsxSelfClosingElement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.JsxSelfClosingElementDescription": {
          "default": "Jsx self closingElement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.LabeledStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.LabeledStatementDescription": {
          "default": "Labeled statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.MethodDeclaration": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.MethodDeclarationDescription": {
          "default": "Method declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.MethodSignature": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.MethodSignatureDescription": {
          "default": "Method signature",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ModuleDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ModuleDeclarationDescription": {
          "default": "Module declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.NamedImports": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.NamedImportsDescription": {
          "default": "Named imports",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.NamespaceImport": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.NamespaceImportDescription": {
          "default": "Namespace import",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.NewExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.NewExpressionDescription": {
          "default": "New expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ObjectBindingPattern": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ObjectBindingPatternDescription": {
          "default": "",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ObjectLiteralExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ObjectLiteralExpressionDescription": {
          "default": "Object literal expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.Parameter": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ParameterDescription": {
          "default": "Parameter",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.PostfixUnaryExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.PostfixUnaryExpressionDescription": {
          "default": "Postfix unary expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.PrefixUnaryExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.PrefixUnaryExpressionDescription": {
          "default": "Prefix unary expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.PropertyAccessExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.PropertyAccessExpressionDescription": {
          "default": "Property access expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.PropertyAssignment": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.PropertyAssignmentDescription": {
          "default": "Property assignment",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.PropertyDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.PropertyDeclarationDescription": {
          "default": "Property declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.PropertySignature": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.PropertySignatureDescription": {
          "default": "Property signature",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.RegularExpressionLiteral": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.RegularExpressionLiteralDescription": {
          "default": "Regular expression literal",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ReturnStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ReturnStatementDescription": {
          "default": "Return statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.SetAccessor": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.SetAccessorDescription": {
          "default": "Set accessor",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.SourceFile": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.SourceFileDescription": {
          "default": "Source file",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.StringLiteral": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.StringLiteralDescription": {
          "default": "String literal",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.SwitchStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.SwitchStatementDescription": {
          "default": "Switch statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.TemplateExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.TemplateExpressionDescription": {
          "default": "Template expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.ThrowStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.ThrowStatementDescription": {
          "default": "Throw statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.TryStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.TryStatementDescription": {
          "default": "Try statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.TypeAssertionExpression": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.TypeAssertionExpressionDescription": {
          "default": "Type assertion expression",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.TypeLiteral": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.TypeLiteralDescription": {
          "default": "Type literal",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.TypeReference": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.TypeReferenceDescription": {
          "default": "Type reference",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.VariableDeclaration": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.VariableDeclarationDescription": {
          "default": "Variable declaration",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.VariableStatement": {
          "default": 0,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.VariableStatementDescription": {
          "default": "Variable statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.WhileStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.WhileStatementDescription": {
          "default": "While statement",
          "type": "string"
        },
        "codemetrics.nodeconfiguration.WithStatement": {
          "default": 1,
          "type": "number"
        },
        "codemetrics.nodeconfiguration.WithStatementDescription": {
          "default": "With statement",
          "type": "string"
        }
      }
    }
  },
  "main": "./out/src/extension",
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install"
  },
  "devDependencies": {
    "@types/minimatch": "^2.0.29",
    "@types/node": "^7.0.0",
    "vscode": "^1.1.5"
  },
  "dependencies": {
    "luaparse": "^0.2.1",
    "minimatch": "^3.0.4",
    "tsmetrics-core": "^0.4.3",
    "typescript": "^2.6.1",
    "vscode-languageclient": "^3.5.0",
    "vscode-languageserver": "^3.5.0"
  }
}
